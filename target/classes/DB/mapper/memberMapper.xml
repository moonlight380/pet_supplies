<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.pet.p1.member.MemberDAO">
 	
 	<select id="memberCart" resultType="DogVO" parameterType="DogVO">
 		select * from product where productNum = #{productNum}
 	</select>
  	
  	<select id="memberIdCheck" resultType="MemberVO" parameterType="MemberVO">
  		select id from member where id = #{id}
  	</select>
 
  	<select id="memberLogin" resultType="MemberVO" parameterType="MemberVO">
		select * from member where id = #{id} and pw = #{pw}
  	</select>
  	
  	<insert id="memberJoin" parameterType="MemberVO">
  		insert into member values(#{id},#{pw},#{name},#{email},#{age, jdbcType=NUMERIC},#{address},#{phone},0,#{sex, jdbcType=VARCHAR})
  	</insert> 
  	
  	<select id="memberEMCheck" resultType="MemberVO" parameterType="MemberVO">
  		select email,name from member where email = #{email}
  	</select>
  	
  	
  	
  	
  	<sql id="search">
		like '%'||#{search}||'%'
	</sql>
	
	<sql id="kind">
		<choose>
			<when test="kind=='mi'">
				id
			</when>
			<when test="kind=='mn'">
				name
			</when>
			<when test="kind=='me'">
				email
			</when>
			<otherwise>
				phone
			</otherwise>
		</choose>
	</sql>
  	
	<select id="memberCount" resultType="Long" parameterType="Pager">
		select count(id) from member where 
		<include refid="kind"></include>
		<include refid="search"></include>
	</select>
	
	<select id="memberList" resultType="MemberVO" parameterType="Pager">
		select * from
			(select M.* , rownum R from 
			(select * from member where  
			<include refid="kind"></include>
			<include refid="search"></include>
			 order by id desc) M) 
		where R BETWEEN #{startRow} and #{lastRow}
		
		
	</select>
	

  	
  	<delete id="memberDelete" parameterType="Long">
  		delete member where id = #{id}
  	</delete>	
  	
  	<update id="memberUpdate" parameterType="MemberVO">
  		update member set pw=#{pw} , name=#{name} , age=#{age} , phone=#{phone} , email=#{email}  where id=#{id}
  	</update>
  	
  	<delete id="memberDeletes" parameterType="List">
  		delete member where id in 
  		<foreach collection="list" item="id" open="(" close=")" separator=",">
 			#{id}
  		</foreach>
  	</delete>
  	

  
  </mapper>